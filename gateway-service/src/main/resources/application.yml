spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      discovery:
        locator:
          #          enabled: true --> by default gives ie. "lb://TASK-SERVICE"
          enabled: true
          lower-case-service-id: true

          # manual configuration, in addition to the default mapping.
          # localhost://8762/cydeo/dev/task-service/api/v1/task  will also be mapped to /task-service
          # this manual configuration can also be done in java in the runner class
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/user/**
          filters:
            - RewritePath=/user/(?<path>.*), /$\{path}
        - id: project-service
          uri: lb://project-service
          predicates:
            - Path=/project/**
          filters:
            - RewritePath=/project/(?<path>.*), /$\{path}
        - id: task-service
          uri: lb://task-service
          predicates:
            - Path=/task/**
          filters:
            - RewritePath=/task/(?<path>.*), /$\{path}
        - id: openapi
          uri: http://localhost:${server.port}
          predicates:
            - Path=/v3/api-docs/**
          filters:
            - RewritePath=/v3/api-docs/(?<path>.*), /$\{path}/v3/api-docs
# localhost:8762/v3/api-docs/user-service
# localhost:9090/user-service/v3/api-docs --> convert this to above line

  # line up with cloud. it belongs to Spring.
  sleuth:
    sampler:
      probability: 1
  # registering the services to Zipkin:
  zipkin:
    base-url: http://host.docker.internal:9411

# entry point:
server:
  port: 8762

# eureka configuration is the same as the other services:
eureka:
  instance:
    status-page-url-path: ${management.context-path}/info
    health-check-url-path: ${management.context-path}/health
  client:
    serviceUrl:
      defaultZone: http://discovery-service:8761/eureka/
# this last one is telling where to register (where is eureka)
# address is not localhost, because it will run in Docker

management:
  endpoint:
    health:
      show-details: "ALWAYS"
  endpoints:
    web:
      exposure:
        include: "*"
  context-path: http://localhost:${server.port}/actuator


info:
  application:
    name: ${spring.application.name}
    description: Ticketing Application
    #    getting versions from Maven;
    version: '@project.version@'
    spring-cloud-version: '@spring-cloud.version@'
    spring-boot-version: '@project.parent.version@'
